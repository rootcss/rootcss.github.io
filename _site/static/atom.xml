<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Blog of Shekhar Singh a.k.a rootcss | Big Data/Data Engineer | Full Stack Developer | Researcher | Data Science | DevOps | Security | Shekhar Singh</title>
    <link type="application/atom+xml" rel="self" href="http://localhost:3000/atom.xml"/>
  
  <link href="http://localhost:3000/"/>
  <id>http://localhost:3000/</id>
  <updated>2016-11-12T05:10:45Z</updated>
  <author>
    <name>Shekhar Singh</name>
    <email>shekhar.singh@msn.com</email>
  </author>
  <rights type="text">Copyright © 2016 Shekhar Singh. All rights reserved.</rights>
  
  <entry>
  <title type="text">Writing &lt;b&gt;Apache Spark&lt;/b&gt; workers with &quot;Simpl Spark Lib&quot;</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/apache-spark-worker-with-simple-spark-lib.html" />
  <id>http://localhost:3000/apache-spark-worker-with-simple-spark-lib</id>
  <published>2016-11-11T00:00:00Z</published>
  <updated>2016-11-11T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>Recently, I was using <a href="https://github.com/jondot/sneakers">sneakers</a> for rails, which is a small framework for Ruby and RabbitMQ. One issue with sneakers is that, if you have faulty configuration for a queue or you do not provide a queue name, it leaves it upto rabbitmq to define it. So, for some reason (which I don’t want to focus on), we had more than 1600 queues created on that particular exchange, and unfortunately they were not Auto-delete and we didn’t want other exchanges and queues to get hurt because of this ;)</p>

<p>Anyway, Now the challenge was to delete them, because for that you have to manually click on each queue, select ‘Delete’ on the new page and finally, confirm it on pop-up.</p>

<p>I was like, :O</p>

<p>Anyways, Thanks to handy APIs of rabbitmq, these are the following few commands I used in order to delete them quickly. (rabbitmq generally creates default queues with names like <code class="highlighter-rouge">amq.gen--*</code>)</p>

<p>First let’s list all the queues in the form of bash arrays:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">rabbitmqadmin --host<span class="o">=</span>&lt;mqserver.hostname.com&gt; --port<span class="o">=</span>443 --ssl --vhost<span class="o">=</span>&lt;your_vhost&gt; --username<span class="o">=</span>&lt;your_username&gt; --password<span class="o">=</span>&lt;your_password&gt; list queues | awk <span class="s1">'{print $2}'</span> | grep amq.gen  | xargs | sed -e <span class="s1">'s/ /" "/g'</span></code></pre></figure>

<p>Now copy the output of it, declare as an array and run a loop to delete them all.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">declare</span> -a <span class="nv">arr</span><span class="o">=(</span><span class="s2">"amq.gen--PxKpFBHkIxxebJEwbmV6g"</span> <span class="s2">"amq.gen--Q6BeLdfGHsXY6RgVmu8Ig"</span> <span class="s2">"amq.gen--WI0hRAHCOkPIrEULYc1vQ"</span> <span class="s2">"amq.gen--XufS0RrnfZUXyf0Rt1tAg"</span> <span class="s2">"amq.gen--_NXdwlSHYDJwGDiuX8_XA"</span> ......<span class="o">)</span>

<span class="k">for </span>i <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">arr</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span>
<span class="k">do
   </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$i</span><span class="s2">"</span>
   rabbitmqadmin --host<span class="o">=</span>&lt;mqserver.hostname.com&gt; --port<span class="o">=</span>443 --ssl --vhost<span class="o">=</span>&lt;your_vhost&gt; --username<span class="o">=</span>&lt;your_username&gt; --password<span class="o">=</span>&lt;your_password&gt; delete queue <span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="nv">$i</span><span class="s2">"</span>
<span class="k">done</span></code></pre></figure>

<p>That’s it. These small hacks makes me fall in love with programming everyday &lt;3</p>

<p>Thanks!</p>

<style type="text/css">
pre {
    white-space: pre-wrap;
}
</style>

 ]]></content>
</entry>


  <entry>
  <title type="text">&lt;b&gt;RabbitMQ&lt;/b&gt; - Automated deletion of 1000s of queues</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/rabbitmq-queues-overflow-automated-deletion.html" />
  <id>http://localhost:3000/rabbitmq-queues-overflow-automated-deletion</id>
  <published>2016-03-24T00:00:00Z</published>
  <updated>2016-03-24T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>Recently, I was using <a href="https://github.com/jondot/sneakers">sneakers</a> for rails, which is a small framework for Ruby and RabbitMQ. One issue with sneakers is that, if you have faulty configuration for a queue or you do not provide a queue name, it leaves it upto rabbitmq to define it. So, for some reason (which I don’t want to focus on), we had more than 1600 queues created on that particular exchange, and unfortunately they were not Auto-delete and we didn’t want other exchanges and queues to get hurt because of this ;)</p>

<p>Anyway, Now the challenge was to delete them, because for that you have to manually click on each queue, select ‘Delete’ on the new page and finally, confirm it on pop-up.</p>

<p>I was like, :O</p>

<p>Anyways, Thanks to handy APIs of rabbitmq, these are the following few commands I used in order to delete them quickly. (rabbitmq generally creates default queues with names like <code class="highlighter-rouge">amq.gen--*</code>)</p>

<p>First let’s list all the queues in the form of bash arrays:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">rabbitmqadmin --host<span class="o">=</span>&lt;mqserver.hostname.com&gt; --port<span class="o">=</span>443 --ssl --vhost<span class="o">=</span>&lt;your_vhost&gt; --username<span class="o">=</span>&lt;your_username&gt; --password<span class="o">=</span>&lt;your_password&gt; list queues | awk <span class="s1">'{print $2}'</span> | grep amq.gen  | xargs | sed -e <span class="s1">'s/ /" "/g'</span></code></pre></figure>

<p>Now copy the output of it, declare as an array and run a loop to delete them all.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">declare</span> -a <span class="nv">arr</span><span class="o">=(</span><span class="s2">"amq.gen--PxKpFBHkIxxebJEwbmV6g"</span> <span class="s2">"amq.gen--Q6BeLdfGHsXY6RgVmu8Ig"</span> <span class="s2">"amq.gen--WI0hRAHCOkPIrEULYc1vQ"</span> <span class="s2">"amq.gen--XufS0RrnfZUXyf0Rt1tAg"</span> <span class="s2">"amq.gen--_NXdwlSHYDJwGDiuX8_XA"</span> ......<span class="o">)</span>

<span class="k">for </span>i <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">arr</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span>
<span class="k">do
   </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$i</span><span class="s2">"</span>
   rabbitmqadmin --host<span class="o">=</span>&lt;mqserver.hostname.com&gt; --port<span class="o">=</span>443 --ssl --vhost<span class="o">=</span>&lt;your_vhost&gt; --username<span class="o">=</span>&lt;your_username&gt; --password<span class="o">=</span>&lt;your_password&gt; delete queue <span class="nv">name</span><span class="o">=</span><span class="s2">"</span><span class="nv">$i</span><span class="s2">"</span>
<span class="k">done</span></code></pre></figure>

<p>That’s it. These small hacks makes me fall in love with programming everyday &lt;3</p>

<p>Thanks!</p>

<style type="text/css">
pre {
    white-space: pre-wrap;
}
</style>

 ]]></content>
</entry>


  <entry>
  <title type="text">&lt;b&gt;Linux&lt;/b&gt; I/O redirection examples</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/linux-io-redirections.html" />
  <id>http://localhost:3000/linux-io-redirections</id>
  <published>2016-02-15T00:00:00Z</published>
  <updated>2016-02-15T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>I/O redirections are one of the prettiest things we have in linux (IMO!) Following are commands and their usage.
<br /><br />
<code class="highlighter-rouge">command_output &gt;&gt; file </code>
  Redirects stdout to a file. Creates the file if not present, otherwise appends.</p>

<p><code class="highlighter-rouge"> &gt; filename </code>
  Truncates the file to zero length. If file is not present, creates zero-length file (same effect as <code class="highlighter-rouge">touch</code>).</p>

<p><code class="highlighter-rouge"> 1&gt;filename </code>
  Redirects stdout to the file “filename”.</p>

<p><code class="highlighter-rouge"> 1&gt;&gt;filename </code>
  Redirects and appends stdout to file “filename”.</p>

<p><code class="highlighter-rouge"> 2&gt;filename </code>
  Redirects stderr to file “filename”.</p>

<p><code class="highlighter-rouge"> 2&gt;&gt;filename </code>
  Redirects and appends stderr to file “filename”.</p>

<p><code class="highlighter-rouge"> &amp;&gt;filename </code>
  Redirects both stdout and stderr to file “filename”.</p>

<p><code class="highlighter-rouge"> 2&gt;&amp;1 </code>
  Redirects stderr to stdout. Error messages get sent to same place as standard output.</p>
<hr />

<p>Some quality explanation now ;) Take the example of this command:
<br /><code class="highlighter-rouge"> cmd &gt;&gt; file.log 2&gt;&amp;1 </code>
<br />
This command will redirect all the output of command(cmd) into <code class="highlighter-rouge">file.log</code>.<br />
<code class="highlighter-rouge">2</code> refers to Second file descriptor of the process i.e., stderr<br />
<code class="highlighter-rouge">&gt;</code> refers to redirection<br />
<code class="highlighter-rouge">&amp;1</code> means that the target of redirection would be same as <code class="highlighter-rouge">1</code> i.e, first descriptor i.e, stdout.<br /></p>

<p>Thanks!</p>

<style type="text/css">
code {
    font-weight: bold;
    font-size: 18px;
    background: #ddd;
    padding: 3px;
}   
</style>

 ]]></content>
</entry>


  <entry>
  <title type="text">PostgreSQL - update timestamp when row(s) is updated</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/postgres-update-timestamp-when-row-is-updated.html" />
  <id>http://localhost:3000/postgres-update-timestamp-when-row-is-updated</id>
  <published>2015-11-24T00:00:00Z</published>
  <updated>2015-11-24T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>In PostgreSQL, if you want to set current timestamp as default value, you can simply keep a column’s default expression as <code class="highlighter-rouge">now()</code>. However, by default there is no function defined to update the timestamp when a particular row (or multiple rows) need to be updated.</p>

<p>In such scenario, you may create your custom method and trigger it using <b>PostgreSQL’s Triggers</b>. Following snippet will make it more clear:</p>

<p>Here, we are creating a new method, <code class="highlighter-rouge">method_get_updated_at()</code></p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">method_get_updated_at</span><span class="p">()</span> <span class="k">RETURNS</span> <span class="k">TRIGGER</span>
<span class="k">LANGUAGE</span> <span class="n">plpgsql</span>
<span class="k">AS</span> <span class="err">$$</span>
    <span class="k">BEGIN</span>
      <span class="k">NEW</span><span class="p">.</span><span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">now</span><span class="p">();</span>
      <span class="k">RETURN</span> <span class="k">NEW</span><span class="p">;</span>
    <span class="k">END</span><span class="p">;</span>
<span class="err">$$</span><span class="p">;</span></code></pre></figure>

<p>Once it is created, use the following snippet to trigger it:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">CREATE</span> <span class="k">TRIGGER</span> <span class="n">trigger_</span><span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span>
<span class="k">BEFORE</span> <span class="k">UPDATE</span> <span class="k">ON</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span>
<span class="k">FOR</span> <span class="k">EACH</span> <span class="k">ROW</span>
<span class="k">EXECUTE</span> <span class="k">PROCEDURE</span> <span class="n">method_get_updated_at</span><span class="p">();</span></code></pre></figure>

<p>If you want to delete a Trigger, you can use this simple query:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">DROP</span> <span class="k">TRIGGER</span> <span class="n">IF</span> <span class="k">EXISTS</span> <span class="n">trigger_</span><span class="o">&lt;</span><span class="k">column_name</span><span class="o">&gt;</span> <span class="k">ON</span> <span class="o">&lt;</span><span class="k">table_name</span><span class="o">&gt;</span></code></pre></figure>

<p><b>Note:</b> Please update the <table_name> and <column_name> accordingly and execute the code for your particular database. Also, note that, some web frameworks (like Rails) manage such columns(created_at, updated_at) automatically.</column_name></table_name></p>

<p>ALso, if you want to view all existing methods, run this query:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span>  <span class="n">p</span><span class="p">.</span><span class="n">proname</span>
<span class="k">FROM</span>    <span class="n">pg_catalog</span><span class="p">.</span><span class="n">pg_namespace</span> <span class="n">n</span>
<span class="k">JOIN</span>    <span class="n">pg_catalog</span><span class="p">.</span><span class="n">pg_proc</span> <span class="n">p</span>
<span class="k">ON</span>      <span class="n">p</span><span class="p">.</span><span class="n">pronamespace</span> <span class="o">=</span> <span class="n">n</span><span class="p">.</span><span class="n">oid</span>
<span class="k">WHERE</span>   <span class="n">n</span><span class="p">.</span><span class="n">nspname</span> <span class="o">=</span> <span class="s1">'public'</span></code></pre></figure>

<p>And, run this query to view all Triggers:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pg_trigger</span><span class="p">;</span></code></pre></figure>

<p>Thanks!</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Accessing &lt;b&gt;PostgreSQL&lt;/b&gt; server through a SSH Tunnel</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/accessing-postgreSQL-through-ssh-tunnel.html" />
  <id>http://localhost:3000/accessing-postgreSQL-through-ssh-tunnel</id>
  <published>2015-11-20T00:00:00Z</published>
  <updated>2015-11-20T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p><b>Step 1:</b> Check the SSH connectivity with the server, verify username and password.</p>

<p><b>Step 2:</b> Create the tunnel in your local system by executing the following command (It will prompt for password):</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">ssh -fNg -L 5555:localhost:5432 &lt;user&gt;@&lt;server&gt;</code></pre></figure>

<p><b>Step 3:</b> Now, open your PostgreSQL client (eg, <code class="highlighter-rouge">pgAdmin 3</code> or <code class="highlighter-rouge">DBeaver</code> or <code class="highlighter-rouge">Postico</code> for OS X or <code class="highlighter-rouge">Terminal</code>) and fill in the connection details as usual. Check the image below.</p>

<p><img src="/assets/images/postico-port-forwarding.png" alt="Postico DB connection " />
<!-- {: .center-image .image-size-medium} --></p>

<p><b>Note:</b> Yes, you’ll have to use <code class="highlighter-rouge">'localhost'</code>.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Welcome!</title>
  <link rel="alternate" type="text/html" href="http://localhost:3000/new.html" />
  <id>http://localhost:3000/new</id>
  <published>2011-12-31T00:00:00Z</published>
  <updated>2011-12-31T00:00:00Z</updated>
  <content type="html"><![CDATA[ 
 ]]></content>
</entry>



</feed>
